<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[docker 远程桌面]]></title>
      <url>%2F2017%2F06%2F15%2Fdocker-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%2F</url>
      <content type="text"><![CDATA[安装下载配置文件参考 github vnd desktop，将里面的image文件下载好，放到安装目录 需要提前下载tnit，此文件为针对docker使用的init文件1https://github.com/krallin/tini/releases/download/$&#123;TINI_VERSION&#125;/tini 编辑sources.list文件在安装目录下建立sources.list文件，并加入12345678910deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main multiverse restricted universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main multiverse restricted universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main multiverse restricted universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main multiverse restricted universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main multiverse restricted universedeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main multiverse restricted universedeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main multiverse restricted universedeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main multiverse restricted universedeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main multiverse restricted universedeb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main multiverse restricted universe 编辑DockerFile文件123456789101112131415161718192021222324252627282930313233343536373839FROM ubuntu:16.04MAINTAINER light &lt;light@light.com&gt;ENV DEBIAN_FRONTEND noninteractiveCOPY ./sources.list /etc/apt/COPY ./image/ /COPY ./tini /bin/tiniRUN chmod +x /bin/tiniRUN apt-get update \ &amp;&amp; apt-get install -y --no-install-recommends software-properties-common curl \ &amp;&amp; add-apt-repository ppa:fcwu-tw/ppa \ &amp;&amp; apt-get update \ &amp;&amp; apt-get install -y --no-install-recommends --allow-unauthenticated \ supervisor \ openssh-server pwgen sudo vim-tiny \ net-tools \ lxde x11vnc xvfb \ gtk2-engines-murrine ttf-ubuntu-font-family \ fonts-wqy-microhei \ nginx \ python-pip python-dev build-essential \ mesa-utils libgl1-mesa-dri \ gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine pinta \ dbus-x11 x11-utils \ &amp;&amp; apt-get autoclean \ &amp;&amp; apt-get autoremove \ &amp;&amp; rm -rf /var/lib/apt/lists/*RUN pip install --upgrade pip &amp;&amp; pip install setuptools wheel &amp;&amp; pip install -r /usr/lib/web/requirements.txtEXPOSE 80WORKDIR /rootENV HOME=/root \ SHELL=/bin/bashENTRYPOINT [&quot;/startup.sh&quot;] 运行1docker run --device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia0 --device=/dev/nvidia1 --device=/dev/nvidia2 --device=/dev/nvidia3 -d -it --dns 202.107.117.11 --volume-driver=nvidia-docker --volume=nvidia_driver_367.48:/usr/local/nvidia:ro --privileged=true -p 6080:80 -e VNC_PASSWORD=lxde_docker --name lxde ab8a1798422c 挂载1docker run --device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia0 --device=/dev/nvidia1 --device=/dev/nvidia2 --device=/dev/nvidia3 -d -it --dns 202.107.117.11 --volume-driver=nvidia-docker --volume=nvidia_driver_367.48:/usr/local/nvidia:ro --privileged=true -p 6080:80 -e VNC_PASSWORD=lxde_docker --volumes-from anaconda3 --name lxde d2e29991c14d]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于hexo搭建博客]]></title>
      <url>%2F2017%2F06%2F15%2F%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[安装hexo安装nodejs环境12sudo apt-get install -y nodejssudo apt install nodejs-legacy 安装hexo1sudo npm install hexo-cli -g 初始化blog目录1hexo init name.github.io/ 生成静态页面，需要进入blog目录1hexo generate 预览效果1hexo server 安装git 插件1sudo npm install hexo-deployer-git --save 安装搜索1sudo npm install hexo-generator-searchdb --save 配置RSS1sudo npm install hexo-generator-feed --save 添加文章的步骤12345hexo new &quot;第一篇博客&quot;#edit source/_posts/第一篇博客.mdhexo cleanhexo generatehexo deploy 管理hexo的生成文件的目录，注意在push之前需要把文件都提交123git initgit remote add origin https://github.com/name/blog.gitgit push -u origin master 修改_config.yml添加配置12345678910111213141516# 添加发布的路径deploy: type: git repo: https://github.com/name/name.github.io.git branch: master# 添加多说和百度统计# 多说停了。。# duoshuo_shortname: name# duoshuo_share: truebaidu_analytics: ec30a044f2f69aacc83c0b70ea53e01asearch: path: search.xml field: post format: html limit: 10000 安装主题安装nexT主题12cd hexo_blog_dirgit clone https://github.com/iissnan/hexo-theme-next themes/next 添加tag1hexo new page tags 添加分类1hexo new page categories 添加关于1hexo new page about 文章内容的手工截断1&lt;!-- more --&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker环境配置]]></title>
      <url>%2F2017%2F06%2F15%2Fdocker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[安装docker123sudo apt-get install docker docker.iosudo service docker startsudo docker info 不使用sudo进行任务服务查看由于docker使用unix域套接字，除了docker和root，普通用户无法直接使用，用root又不太安全因此需要将当前用户加入到docker组中12sudo groupadd dockersudo usermod -aG docker cosmos 设置docker代理docker代理需要独立设置12mkdir /etc/systemd/system/docker.service.dtouch /etc/systemd/system/docker.service.d/http-proxy.conf 添加如下内容123[Service]Environment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;Environment=&quot;NO_PROXY=localhost,127.0.0.0/8,docker-registry.somecorporation.com&quot; //如果有本地registy的使用这个跳过代理 查看环境变量1sudo systemctl show docker --property Environment 添加dns12#添加新配置文件/etc/docker/daemon.json 填入一下内容123&#123; &quot;dns&quot;: [&quot;domainIP&quot;]&#125; 刷新环境变量12sudo systemctl daemon-reloadsudo systemctl restart docker docker镜像保存路径docker默认保存在12## 安装运行镜像### 安装并运行 以registry为例12docker pull registrydocker run -d -p 5000:5000 --restart=always --name registry 修改提交镜像1docker commit -m &quot;add vim and sudo command&quot; -a &quot;author&quot; $CONTAINER_ID author/domain:tag 上传镜像1234567# 通过tag表示要上传的registydocker tag domain/image:tag ip:5000/domain/image:tag# 如果是dockerhub或阿里其他的非本地registry，需要登入docker login --username=username registry.cn-hangzhou.aliyuncs.comdocker push 10.10.142.69:5000/domain/image:tag# 删除docker rmi 10.10.142.69:5000/domain/image:tag 本地registry配置时需要删除代理，并跳过证书 跳过证书配置12# 再/etc/default/docker或/etc/sysconfig/docker中添加DOCKER_OPTS=&quot;--insecure-registry registryIP:5000&quot; 进入docker1234docker ps -a # 查看容器docker images # 查看镜像docker exec -it containerId /bin/bashdocker attach --sig-proxy=false $CONTAINER_ID 构建开发环境1，编写Dockerfile文件，用语构建环境1234FROM ubuntu:16.04 MAINTAINER light &quot;light@light.com&quot; WORKDIR /CMD [&quot;/bin/bash&quot;] 2，执行构建1docker build -t light/lpr_build . 查看docker镜像及容器的继承关系使用dockviz1dockviz images -d -l | dot -Tpng -o images.png 容器与宿主及文件交互1docker cp opencv $CONTAINER_ID:/root docker 数据卷可实现创造一个data volmumes，然后启动1docker run -d --dns domainIP -v /root/anaconda3 --name anaconda3 domain/anaconda3 echo &quot;Anaconda3 data volmume&quot; 在需要使用数据卷的地方调用1docker run --device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia0 --device=/dev/nvidia1 --device=/dev/nvidia2 --device=/dev/nvidia3 -d -it --dns domainIP --volume-driver=nvidia-docker --volume=nvidia_driver_367.48:/usr/local/nvidia:ro --privileged=true --volumes-from anaconda3 -p 7080:80 --name develop cb5c90540bdb 注意数据卷不意为这保存数据，数据的保存还是要通过将宿主的目录挂载到docker中来实现，而数据卷可以用来保存一些公用的程序及配置 nvidia docker配置下载安装123wget https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker-1.0.1-1.x86_64.rpmsudo rpm -ivh nvidia-docker-1.0.1-1.x86_64.rpmsudo systemctl start nvidia-docker 运行123456docker run --device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia0 --device=/dev/nvidia1 --device=/dev/nvidia2 --device=/dev/nvidia3 -d -it --dns dnsip --volume=nvidia_driver_367.48:/usr/local/nvidia:ro --privileged=true domain/image:tag /bin/bashdocker run --device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia0 --device=/dev/nvidia1 --device=/dev/nvidia2 --device=/dev/nvidia3 -d -it --dns dnsip --volume-driver=nvidia-docker--volume=nvidia_driver_367.48:/usr/local/nvidia:ro --privileged=true --name u16_cuda domain/image:tag /bin/bash# 如果不想每次都使用 --volume-driver=nvidia-docker 可以使用下面的命令，先将volume建出来docker volume create --name=nvidia_driver_367.48-d nvidia-docker 更新ld.conf.d添加/etc/ld.so.conf.d/cuda.conf文件，并加入 /usr/local/cuda/lib64添加nvidia.conf文件，并加入12/usr/local/nvidia/lib/usr/local/nvidia/lib64]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[qemu 虚拟机模拟raspberry]]></title>
      <url>%2F2017%2F04%2F17%2Fqemu-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A8%A1%E6%8B%9Fraspberry%2F</url>
      <content type="text"><![CDATA[1，下载树莓派到此目录下下载树莓派的镜像文件1https://downloads.raspberrypi.org/raspbian/ 2，安装qemu1apt-get install qemu binfmt-support qemu-user-static 3，下载树莓派启动内核1https://github.com/dhruvvyas90/qemu-rpi-kernel 4，修改系统配置4.1 将镜像文件映射成loop设备文件1234mkdir rootfssudo kpartx -av 2016-09-23-raspbian-jessie.imgsudo mount /dev/mapper/loop0p2 rootfscd rootfs 4.1 将etc/fstab文件中的mmcblk的挂载注释掉12345proc /proc proc defaults 0 0#/dev/mmcblk0p1 /boot vfat defaults 0 2#/dev/mmcblk0p2 / ext4 defaults,noatime 0 1# a swapfile is not a swap partition, no line here# use dphys-swapfile swap[on|off] for that 4.2 修改/etc/ld.so.preload文件注释掉引用的动态库1#/usr/lib/arm-linux-gnueabihf/libarmmem.so 4.3 umount掉rootfs,并移除loop设备12sudo umount /mnt/img1sudo kpartx -d your-image.img 4.4 启动qemu123qemu-system-arm -kernel ./kernel-qemu-4.4.21-jessie -cpu arm1176 -m 256M -M versatilepb -serial stdio -append &quot;root=/dev/sda2 console=ttyAMA0 panic=1 rootfstype=ext4 rw&quot; -drive &quot;file=2016-09-23-raspbian-jessie.img,index=0,media=disk,format=raw&quot; -redir tcp:2222::22qemu-system-arm -kernel ./kernel-qemu-4.4.21-jessie -cpu arm1176 -m 256M -M versatilepb -serial stdio -append &quot;root=/dev/sda2 console=ttyAMA0 panic=1 rootfstype=ext4 rw&quot; -drive &quot;file=2016-09-23-raspbian-jessie.img,index=0,media=disk,format=raw&quot; -net nic -net tap,ifname=tap0,script=no 5扩展分区直接启动发现系统所剩空间不多123456789df -hFilesystem Size Used Avail Use% Mounted on/dev/root 3.9G 3.6G 94M 98% /devtmpfs 124M 0 124M 0% /devtmpfs 124M 0 124M 0% /dev/shmtmpfs 124M 4.5M 120M 4% /runtmpfs 5.0M 0 5.0M 0% /run/locktmpfs 124M 0 124M 0% /sys/fs/cgrouptmpfs 25M 0 25M 0% /run/user/1000 因此需要扩展分区 5.1 扩展镜像分区qemu-img resize 2016-09-23-raspbian-jessie.img +5G12345678910111213141516171819202122232425262728293031323334353637383940414243444546sudo fdisk 2016-09-23-raspbian-jessie.img Command (m for help): pDisk 2016-09-23-raspbian-jessie.img: 9717 MB, 9717153792 bytes255 heads, 63 sectors/track, 1181 cylinders, total 18978816 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0xd94ffdb3 Device Boot Start End Blocks Id System2016-09-23-raspbian-jessie.img1 8192 137215 64512 c W95 FAT32 (LBA)2016-09-23-raspbian-jessie.img2 137216 8493055 4177920 83 LinuxCommand (m for help): pDisk 2016-09-23-raspbian-jessie.img: 9717 MB, 9717153792 bytes255 heads, 63 sectors/track, 1181 cylinders, total 18978816 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0xd94ffdb3 Device Boot Start End Blocks Id System2016-09-23-raspbian-jessie.img1 8192 137215 64512 c W95 FAT32 (LBA)2016-09-23-raspbian-jessie.img2 137216 8493055 4177920 83 LinuxCommand (m for help): dPartition number (1-4): 2Command (m for help): nPartition type: p primary (1 primary, 0 extended, 3 free) e extendedSelect (default p): pPartition number (1-4, default 2): Using default value 2First sector (2048-18978815, default 2048): 137216Last sector, +sectors or +size&#123;K,M,G&#125; (137216-18978815, default 18978815): Using default value 18978815Command (m for help): wThe partition table has been altered!Syncing disks. 查看分区结果123456789101112fdisk -l 2016-09-23-raspbian-jessie.img Disk 2016-09-23-raspbian-jessie.img: 9717 MB, 9717153792 bytes255 heads, 63 sectors/track, 1181 cylinders, total 18978816 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0xd94ffdb3 Device Boot Start End Blocks Id System2016-09-23-raspbian-jessie.img1 8192 137215 64512 c W95 FAT32 (LBA)2016-09-23-raspbian-jessie.img2 137216 18978815 9420800 83 Linux 再次启动查看，磁盘空间改变123456789df -hFilesystem Size Used Avail Use% Mounted on/dev/root 8.8G 3.6G 4.9G 43% /devtmpfs 124M 0 124M 0% /devtmpfs 124M 68K 124M 1% /dev/shmtmpfs 124M 4.5M 120M 4% /runtmpfs 5.0M 0 5.0M 0% /run/locktmpfs 124M 0 124M 0% /sys/fs/cgrouptmpfs 25M 4.0K 25M 1% /run/user/1000 6 增加内存由于只有使用256M内存，所以系统反应有些慢，因此可以增加swap来提高性能修改/etc/dphys-swapfile文件12#CONF_SWAPSIZE=100CONF_SWAPSIZE=1024 重启服务12sudo /etc/init.d/dphys-swapfile stopsudo /etc/init.d/dphys-swapfile start 查看12345free -m total used free shared buffers cachedMem: 247 222 25 5 10 156-/+ buffers/cache: 55 192Swap: 1023 0 1023 7 修改设备名称在虚拟机中磁盘别识别位sda，而在物理系统中则位mmcblk0*，因此为了保持一直，修改udev中的连接1234/etc/udev/rules.d/90-qemu.rules KERNEL==&quot;sda&quot;, SYMLINK+=&quot;mmcblk0&quot;KERNEL==&quot;sda1&quot;, SYMLINK+=&quot;mmcblk0p1&quot;KERNEL==&quot;sda2&quot;, SYMLINK+=&quot;mmcblk0p2&quot; 8超频1sudo raspi-config 选择8 over clock，在选择Turbo模式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[编写可读代码的艺术笔记]]></title>
      <url>%2F2017%2F02%2F25%2F%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%2F</url>
      <content type="text"><![CDATA[1 可读性基本定理代码的写法应当使别人**理解它所需的时间最小化** 因此尽管减少代码行数是一个好目标，但把理解代码所需的时间最小 化是一个更好的目标 “表面层次” 的改进开始： 选择好的名字、 写好的注释以及把代码整洁地写成更好的格式 2 把信息装到名字里 选择专业的词 避免泛泛的名字 用具体的名字代替抽象的名字 使用前缀或后缀来给名字附带更多信息 决定名字的长度 利用名字的格式来表达含义 2.1 选择非常专业的词 单词 更多选择 send deliver、 dispatch、 announce、 distribute、 route find search、 extract、 locate、 recover start launch、 create、 begin、 open start create、 set up、 build、 generate、 compose、 add、 new 2.2 避免像tmp和retval这样泛泛的名字挑一个能描述这个实体的值或者目的的名字 2.3 循环迭代器当有2层或3层循环的时候，一个有效精确的名字代替i，j会避免很多很难发现的缺陷1if (clubs[i].members[k] == users[j]) 使用更精确的名字可能会有帮助。 如果不把循环索引命名为（i、 j、k），另一个选择可以是（club_i、 members_i、 user_i）或者，更简化一点（ci、 mi、ui） 。 这种方式会帮助把代码中的缺陷变得更明显：12if (clubs[ci].members[ui] == users[mi]) #缺陷！ 第一个字母不匹配if (clubs[ci].members[mi] == users[ui]) #OK。 首字母匹配 2.4 用具体的名字代替抽象的名字12DISALLOW_EVIL_CONSTRUCTORS //没有实指DISALLOW_COPY_AND_ASSIGN 2.5 为名字附带更多信息1string id; // Example: &quot;af84ef845cd8&quot; 如果让读者记住这个ID的格式很重要的话， 你可以把它改名为hex_id。 2.6 带单位的值1var start = (new Date()).getTime(); // top of the page 通过给变量结尾追加_ms， 我们可以让所有的地方更明确1var start = (new Date()).getTime(); // top of the page 2.7 附带其他重要属性 情形 变量名 更好的名字 一个“纯文本” 格式的密码， 需要加密后才能 进一步使用 password plaintext_password 一条用户提供的注释，需要转义之后才能用于显示 comment unescaped_comment 已转化为UTF-8格式的html字节 html html_utf8 以“url方式编码” 的输入数据 data data_urlenc 标识变量的任何关键属性，如果需要的话以易读的方式把它加到名字里。 你可以把这称为“英语表示法” 。 2.8 名字应该有多长 在小的作用域里可以使用短的名字 使用通用的缩写 丢掉没用的词 利用名字的格式来传递含义 Google开源项目格式规范的C++代码12345678static const int kMaxOpenFiles = 100;class LogReader &#123; public: void OpenFile(string local_file); private: int offset_; //用尾部‘_’区分是否为成员变量 DISALLOW_COPY_AND_ASSIGN(LogReader);&#125;; 变量名：类型，关键属性，单位 3 不会误解的名字3.1 推荐用min和max来表示（包含）极限123CART_TOO_BIG_LIMIT = 10if shopping_cart.num_items() &gt;= CART_TOO_BIG_LIMIT: Error(&quot;Too many items in cart.&quot;) 这段代码有个经典的“大小差一” 缺陷。我们可以简单地通过把&gt;=变成&gt;来改正它问题的根源在于 CART_TOO_BIG_LIMIT是个二义性名字， 它的含义到底是“少于” 还是“少于/且包括” 3.2 推荐用first和last来表示包含的范围3.3 推荐用begin和end来表示包含/排除范围3.3 给布尔值命名1bool read_password = true; 最好避免用“read” 这个词，用need_password或者user_is_authenticated这样的名字来代替通常来讲， 加上像is、 has、can或should这样的词，可以把布尔值变得更明确。最好避免使用反义名字 3.4 与使用者的期望相匹配很多程序员都习惯了把以g e t开始的方法当做“轻量级访问器” 这样的用法， 它只是简单地返回一个内部成员变量。 如果违背这个习惯很可能会误导用户。123456public class StatisticsCollector &#123; public void addSample(double x) &#123; ... &#125; public double getMean() &#123; //Iterate through all samples and return total / num_samples &#125;&#125; 在这个例子中， getMean()的实现是要遍历所有经过的数据并同时计算中值。 如果有大量的数据的话， 这样的一步可能会有很大的代价！ 但一个容易轻信的程序员可能会随意地调用getMean()，还以为这是个没什么代价的调用。这个方法应当重命名为像 computeMean() 这样的名字， 后者听起来更像是有些代价的操作。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring boot 初体验1]]></title>
      <url>%2F2017%2F02%2F20%2Fspring-boot-%E5%88%9D%E4%BD%93%E9%AA%8C1%2F</url>
      <content type="text"><![CDATA[spring boot web开发初体验1 spring boot安装开发环境：mint18 安装java，maven，gradle123456sudo apt-get install openjdk-8-jdksudo apt-get install mavencurl -s get.sdkman.io | bashsource &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot; #初始化sdkmansdk install gradle #安装gradlesdk install springboot maven需要修改repo为阿里的repo，编辑/etc/maver/setting.xml，在mirrors中添加123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 2 创建POM文件创建一个maven 的pom.xml文件，将下面的样例copy进去： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;myproject&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.BUILD-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;!-- Additional lines to be added here... --&gt; &lt;!-- (you don&apos;t need this if you are using a .RELEASE version) --&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt;&lt;/project&gt; 执行 mvn package 下载测试pom文件 3 添加classpath依赖Spring Boot提供了许多“启动器”，使得容易将jar添加到类路径。 示例应用程序已经在POM的父部分中使用了spring-boot-starter-parent。 spring-boot-starter-parent是一个特殊的启动器，提供了有用的Maven默认值。 它还提供了一个依赖关系管理部分，以便您可以省略依赖关系的版本标签。 其他“Starters”只是提供了开发特定类型应用程序时可能需要的依赖关系。 由于我们正在开发一个Web应用程序，我们将添加一个spring-boot-starter-web依赖关系mvn dependency：tree命令打印项目依赖关系的树表示。 您可以看到，spring-boot-starter-parent本身不提供依赖性。 让我们编辑我们的pom.xml，并在parent部分下面添加spring-boot-starter-web依赖123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 如果再次运行mvn dependency：tree，将看到现在还有许多其他依赖项，包括Tomcat Web服务器和Spring Boot本身。 4 测试代码添加src/main/java/Example.java文件12345678910111213141516171819import org.springframework.boot.*;import org.springframework.boot.autoconfigure.*;import org.springframework.stereotype.*;import org.springframework.web.bind.annotation.*;@RestController@EnableAutoConfigurationpublic class Example &#123; @RequestMapping(&quot;/&quot;) String home() &#123; return &quot;Hello World!&quot;; &#125; public static void main(String[] args) throws Exception &#123; SpringApplication.run(Example.class, args); &#125;&#125; Example的@RestController注解，表示这个类是一个web控制器，来处理web请求@RequestMapping 表示一个路由请求 @EnableAutoConfiguration 告诉spring boot基于你添加的包的依赖如何配置spring boot，由于 spring-boot-starter-web 添加了tomcat及Spring MVC，自动配置假设你在开发一个web应用main函数是一个遵照java约定标准方法，用于应用程序的启动入口。我们的main方法通过调用run来委托Spring Boot的SpringApplication类，SpringApplication将引导我们的应用程序，启动Spring，从而启动自动配置的Tomcat Web服务器。 我们需要传递Example.class作为run方法的参数来告诉SpringApplication这是主要的Spring组件。 5 运行应用程序运行mvn spring-boot:run,然后通过8080端口访问 6 创建一个可执行的jar文件要创建可执行的jar，我们需要将spring-boot-maven-plugin添加到我们的pom.xml中。 在dependencies部分下面插入以下行：12345678&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 运行 mvn package 打包，查看target目录生成myproject-0.0.1-SNAPSHOT.jar文件，myproject-0.0.1-SNAPSHOT.jar.original文件为打包为spring boot前的文件。运行应用程序通过下面的命令java -jar target/myproject-0.0.1-SNAPSHOT.jar 参考：https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started-first-application]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>%2F2017%2F02%2F19%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[终于决定要些博客了，对于一个语文一直不及格的人，写博客这种事总觉得不是一件发自内心且持之以恒的事。但是随着年纪的增加，家庭工作的压力，精力记忆力已经大不如前了，但反而是这种条件，是我变得比以前能稍微勤奋一点点，想着通过记录来将工作和家庭里的一些事情记录下来，以便再老了之后可以通过这一篇篇的博客，来回忆一些事情。 另一方面也是可以将我工作中的一些心得体会记录下来，希望可以对遇到相同问题的人一些帮助，同时纠正我理解中的一些错误。 我争取写的时候都思考一些，努力让自己的话清晰明了，提高自己的写作能力与写作兴趣。 还有一年就第三个本命年了，希望自己别被年龄打败。]]></content>
    </entry>

    
  
  
</search>
